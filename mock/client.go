// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kubernetes/client.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetEndpoints mocks base method
func (m *MockClient) GetEndpoints(namespace, name string) (*v1.Endpoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoints", namespace, name)
	ret0, _ := ret[0].(*v1.Endpoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpoints indicates an expected call of GetEndpoints
func (mr *MockClientMockRecorder) GetEndpoints(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoints", reflect.TypeOf((*MockClient)(nil).GetEndpoints), namespace, name)
}

// WatchEndpoints mocks base method
func (m *MockClient) WatchEndpoints(namespace, name string) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchEndpoints", namespace, name)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchEndpoints indicates an expected call of WatchEndpoints
func (mr *MockClientMockRecorder) WatchEndpoints(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEndpoints", reflect.TypeOf((*MockClient)(nil).WatchEndpoints), namespace, name)
}

// GetPodsWithLabels mocks base method
func (m *MockClient) GetPodsWithLabels(namespace, labelSelectors string) (*v1.PodList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsWithLabels", namespace, labelSelectors)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodsWithLabels indicates an expected call of GetPodsWithLabels
func (mr *MockClientMockRecorder) GetPodsWithLabels(namespace, labelSelectors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsWithLabels", reflect.TypeOf((*MockClient)(nil).GetPodsWithLabels), namespace, labelSelectors)
}

// WatchPodsWithLabels mocks base method
func (m *MockClient) WatchPodsWithLabels(namespace, labelSelectors string) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchPodsWithLabels", namespace, labelSelectors)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchPodsWithLabels indicates an expected call of WatchPodsWithLabels
func (mr *MockClientMockRecorder) WatchPodsWithLabels(namespace, labelSelectors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchPodsWithLabels", reflect.TypeOf((*MockClient)(nil).WatchPodsWithLabels), namespace, labelSelectors)
}
